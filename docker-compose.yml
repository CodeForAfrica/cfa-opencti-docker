version: '3.8'

x-opencti-common-environment: &opencti-common-environment
  OPENCTI_URL: http://opencti:8080
  OPENCTI_TOKEN: ${OPENCTI_ADMIN_TOKEN}

x-connector-service-settings: &connnector-service-settings
  deploy: &connector-deploy-settings
    replicas: 1
    placement:
      constraints:
        - node.labels.role == opencti-core
  environment: &connector-environment-vars
    <<: *opencti-common-environment
    CONNECTOR_CONFIDENCE_LEVEL: 15 # From 0 (Unknown) to 100 (Fully trusted)
    CONNECTOR_LOG_LEVEL: info



services:
  nginx:
    image: codeforafrica/cfa-opencti:${NGINX_VERSION}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - "80:80"
    depends_on:
      - opencti
      - portainer
    networks:
      - cfa_opencti_network

  redis:
    image: redis:7.2.4
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.role == cache-queue
    restart: always
    volumes:
      - redisdata:/data
    networks:
      - cfa_opencti_network

  rabbitmq:
    image: rabbitmq:3.13-management
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.role == cache-queue
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=rabbit01@localhost
    volumes:
      - amqpdata:/var/lib/rabbitmq
    restart: always
    networks:
      - cfa_opencti_network

  opencti:
    image: opencti/platform:${OPENCTI_VERSION}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.role == opencti-core
    environment:
      - NODE_OPTIONS=--max-old-space-size=8096
      - APP__PORT=8080
      - APP__BASE_URL=${OPENCTI_BASE_URL}
      - APP__ADMIN__EMAIL=${OPENCTI_ADMIN_EMAIL}
      - APP__ADMIN__PASSWORD=${OPENCTI_ADMIN_PASSWORD}
      - APP__ADMIN__TOKEN=${OPENCTI_ADMIN_TOKEN}
      - APP__APP_LOGS__LOGS_LEVEL=error
      - REDIS__HOSTNAME=redis
      - REDIS__PORT=6379
      - ELASTICSEARCH__URL=${ELASTICSEARCH__URL} #List of Elasticsearch URLS
      - MINIO__ENDPOINT=minio
      - MINIO__PORT=9000
      - MINIO__USE_SSL=false
      - MINIO__ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO__SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__PORT=5672
      - RABBITMQ__PORT_MANAGEMENT=15672
      - RABBITMQ__MANAGEMENT_SSL=false
      - RABBITMQ__USERNAME=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - SMTP__HOSTNAME=${SMTP_HOSTNAME}
      - SMTP__PORT=25
      - PROVIDERS__LOCAL__STRATEGY=LocalStrategy
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - rabbitmq
    restart: always
    networks:
      - cfa_opencti_network

  worker:
    <<: *opencti-common-environment
    image: opencti/worker:${OPENCTI_VERSION}
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.labels.role == opencti-core
    environment:
      - WORKER_LOG_LEVEL=info
    depends_on:
      - opencti
    restart: always
    networks:
      - cfa_opencti_network

  connector-export-file-stix:
    <<: *connector-environment-vars
    image: opencti/connector-export-file-stix:${OPENCTI_VERSION}
    deploy:
      <<: *connector-deploy-settings
    environment:
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_STIX_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileStix2
      - CONNECTOR_SCOPE=application/json
    restart: always
    depends_on:
      - opencti
    networks:
      - cfa_opencti_network

  connector-export-file-csv:
    <<: *connector-environment-vars
    image: opencti/connector-export-file-csv:${OPENCTI_VERSION}
    deploy:
      <<: *connector-deploy-settings
    environment:
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_CSV_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileCsv
      - CONNECTOR_SCOPE=text/csv
    restart: always
    depends_on:
      - opencti
    networks:
      - cfa_opencti_network

  connector-export-file-txt:
    <<: *connector-environment-vars
    image: opencti/connector-export-file-txt:${OPENCTI_VERSION}
    deploy:
      <<: *connector-deploy-settings
    environment:
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_TXT_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileTxt
      - CONNECTOR_SCOPE=text/plain
    restart: always
    depends_on:
      - opencti
    networks:
      - cfa_opencti_network

  connector-import-file-stix:
    <<: *connector-environment-vars
    image: opencti/connector-import-file-stix:${OPENCTI_VERSION}
    deploy:
      <<: *connector-deploy-settings
    environment:
      - CONNECTOR_ID=${CONNECTOR_IMPORT_FILE_STIX_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE
      - CONNECTOR_NAME=ImportFileStix
      - CONNECTOR_VALIDATE_BEFORE_IMPORT=false # Validate any bundle before import
      - CONNECTOR_SCOPE=application/json,text/xml
      - CONNECTOR_AUTO=true # Enable/disable auto-import of file
    restart: always
    depends_on:
      - opencti
    networks:
      - cfa_opencti_network

  connector-import-document:
    <<: *connector-environment-vars
    image: opencti/connector-import-document:${OPENCTI_VERSION}
    deploy:
      <<: *connector-deploy-settings
    environment:
      - CONNECTOR_ID=${CONNECTOR_IMPORT_DOCUMENT_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE
      - CONNECTOR_NAME=ImportDocument
      - CONNECTOR_VALIDATE_BEFORE_IMPORT=true # Validate any bundle before import
      - CONNECTOR_SCOPE=application/pdf,text/plain,text/html
      - CONNECTOR_AUTO=true # Enable/disable auto-import of file
      - CONNECTOR_ONLY_CONTEXTUAL=false # Only extract data related to an entity (a report, a threat actor, etc.)
    restart: always
    depends_on:
      - opencti
    networks:
      - cfa_opencti_network

  portainer-agent:
    image: portainer/agent
    environment:
      - AGENT_CLUSTER_ADDR=tasks.portainer-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
      mode: global
    networks:
      - cfa_opencti_network

  portainer:
    image: portainer/portainer
    command: >
      -H tcp://tasks.portainer-agent:9001 --tlsskipverify
      --admin-password="$$2y$$05$$pZDaPit5nMFKZAOdT4m.v.NjuCJWzgK/1h4zkTbp1hNyuHdcvUhy6"
    ports:
      - "9010:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - cfa_opencti_network


volumes:
  redisdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/ubuntu/opencti/volumes/redisdata
  amqpdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/ubuntu/opencti/volumes/amqpdata
  portainer_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/ubuntu/opencti/volumes/portainer_data

networks:
  cfa_opencti_network:
    driver: overlay
